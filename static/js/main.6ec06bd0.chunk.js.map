{"version":3,"sources":["img/cover2.png","components/SingleCard.js","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","num","className","src","alt","coverCard","onClick","cardImages","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","introAudio","Audio","flipAudio","startFlipEfx","play","shuffleCards","shuffledCards","sort","Math","random","map","id","useEffect","successAudio","prevCards","resetTurn","setTimeout","prevTurns","index","href","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ec06bd0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cover2.92a6c618.png\";","import './SingleCard.css';\r\nimport coverCard from '../img/cover2.png';\r\n\r\nexport default function SingleCard({\r\n  card,\r\n  handleChoice,\r\n  flipped,\r\n  disabled,\r\n  num,\r\n}) {\r\n  const handleClick = () => {\r\n    if (!disabled) {\r\n      handleChoice(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`card card-${num}`}>\r\n      <div className={flipped ? 'flipped' : ''}>\r\n        <img className='front' src={card.src} alt='card front' />\r\n        <img\r\n          className='back'\r\n          src={coverCard}\r\n          onClick={handleClick}\r\n          alt='card back'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from 'react';\nimport SingleCard from './components/SingleCard';\nimport './App.css';\n\nconst cardImages = [\n  { 'src': './img/a.png', matched: false },\n  { 'src': './img/b.png', matched: false },\n  { 'src': './img/c.png', matched: false },\n  { 'src': './img/d.png', matched: false },\n  { 'src': './img/e.png', matched: false },\n  { 'src': './img/f.png', matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // Intro sound effect\n  let introAudio = new Audio('./sound/mixkit-cartoon-positive-sound-2255.wav');\n  const startIntroEfx = () => {\n    introAudio.play();\n  };\n\n  // flip card sound effect\n  let flipAudio = new Audio('./sound/Card-flip-sound-effect.mp3');\n  const startFlipEfx = () => {\n    flipAudio.play();\n  };\n\n  // shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  // handle a choice\n  const handleChoice = (card) => {\n    startFlipEfx();\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  // compare two selected cards\n  useEffect(() => {\n    // // Matched cards sound effect\n    let successAudio = new Audio(\n      './sound/Game-show-winner-bell-sound-effect.mp3'\n    );\n    const startSuccessEfx = () => {\n      successAudio.play();\n    };\n\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              startSuccessEfx();\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  // reset choice & increase turn\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  // Auto start new game\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  // button start new game\n  const newGame = () => {\n    startIntroEfx();\n    shuffleCards();\n  };\n\n  return (\n    <div className='App'>\n      <h1>Memory ABC</h1>\n      <button className='new-btn' onClick={newGame}>\n        <span className='btn-front'>🏆 Nytt Spel</span>\n      </button>\n\n      <div className='card-grid'>\n        {cards.map((card, index) => (\n          <SingleCard\n            num={index}\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n            startFlipEfx={startFlipEfx}\n          />\n        ))}\n      </div>\n      <p className='turns-box'>\n        <span>😅🕖👴</span> försök: <span className='turns'>{turns}</span>\n      </p>\n      <div className='credit'>\n        <a href='https://www.freepik.com/vectors/school'>\n          School vector created by pikisuperstar - www.freepik.com\n        </a>\n        <div>\n          Icons made by{' '}\n          <a\n            href='https://www.flaticon.com/authors/vectors-market'\n            title='Vectors Market'\n          >\n            Vectors Market\n          </a>{' '}\n          from{' '}\n          <a href='https://www.flaticon.com/' title='Flaticon'>\n            www.flaticon.com\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}